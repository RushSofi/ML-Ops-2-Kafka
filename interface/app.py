import streamlit as st
import pandas as pd
from kafka import KafkaProducer
import json
import time
import os
import uuid
import psycopg2
import matplotlib.pyplot as plt
from psycopg2 import OperationalError

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kafka
KAFKA_CONFIG = {
    "bootstrap_servers": os.getenv("KAFKA_BROKERS", "kafka:9092"),
    "topic": os.getenv("KAFKA_TOPIC", "transactions")
}

def init_db_connection():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        return psycopg2.connect(
            dbname="fraud_db",
            user="admin",
            password="password",
            host="postgres",
            connect_timeout=3
        )
    except OperationalError as e:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å PostgreSQL –∑–∞–ø—É—â–µ–Ω.")
        st.stop()
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î: {str(e)}")
        st.stop()

def check_table_exists(conn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã transactions"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'transactions'
                );
            """)
            return cur.fetchone()[0]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        return False

def load_file(uploaded_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞ –≤ DataFrame"""
    try:
        return pd.read_csv(uploaded_file)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def send_to_kafka(df, topic, bootstrap_servers):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Kafka —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        producer = KafkaProducer(
            bootstrap_servers=bootstrap_servers,
            value_serializer=lambda v: json.dumps(v).encode("utf-8"),
            security_protocol="PLAINTEXT"
        )
        
        df['transaction_id'] = [str(uuid.uuid4()) for _ in range(len(df))]
        progress_bar = st.progress(0)
        total_rows = len(df)
        
        for idx, row in df.iterrows():
            producer.send(
                topic, 
                value={
                    "transaction_id": row['transaction_id'],
                    "data": row.drop('transaction_id').to_dict()
                }
            )
            progress_bar.progress((idx + 1) / total_rows)
            time.sleep(0.01)
            
        producer.flush()
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

def show_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ PostgreSQL"""
    conn = None
    try:
        conn = init_db_connection()
        
        if not check_table_exists(conn):
            st.warning("–¢–∞–±–ª–∏—Ü–∞ transactions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
            return
        
        # –¢–æ–ø-10 —Ñ—Ä–æ–¥–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        st.subheader("–¢–æ–ø-10 —Ñ—Ä–æ–¥–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        df_fraud = pd.read_sql(
            """SELECT transaction_id, score, 
                      TO_CHAR(created_at, 'YYYY-MM-DD HH24:MI:SS') as timestamp 
               FROM transactions 
               WHERE fraud_flag = 1 
               ORDER BY created_at DESC 
               LIMIT 10""",
            conn
        )
        
        if not df_fraud.empty:
            st.dataframe(df_fraud)
        else:
            st.info("–ù–µ—Ç —Ñ—Ä–æ–¥–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±–∞–∑–µ")
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Å–∫–æ—Ä–æ–≤
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)")
        df_scores = pd.read_sql(
            "SELECT score FROM transactions ORDER BY created_at DESC LIMIT 100",
            conn
        )
        
        if not df_scores.empty:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.hist(df_scores['score'], bins=20, alpha=0.7, color='skyblue')
            ax.set_xlabel('Score', fontsize=12)
            ax.set_ylabel('Count', fontsize=12)
            ax.grid(axis='y', alpha=0.75)
            st.pyplot(fig)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã")
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    finally:
        if conn:
            conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "uploaded_files" not in st.session_state:
    st.session_state.uploaded_files = {}

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Kafka")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if st.sidebar.button("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
    show_results()

# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏",
    type=["csv"]
)

if uploaded_file and uploaded_file.name not in st.session_state.uploaded_files:
    st.session_state.uploaded_files[uploaded_file.name] = {
        "status": "–ó–∞–≥—Ä—É–∂–µ–Ω",
        "df": load_file(uploaded_file)
    }
    st.success(f"–§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

# –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if st.session_state.uploaded_files:
    st.subheader("üóÇ –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    for file_name, file_data in st.session_state.uploaded_files.items():
        cols = st.columns([4, 2, 2])
        
        with cols[0]:
            st.markdown(f"**–§–∞–π–ª:** `{file_name}`")
            st.markdown(f"**–°—Ç–∞—Ç—É—Å:** `{file_data['status']}`")
        
        with cols[2]:
            if st.button(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å {file_name}", key=f"send_{file_name}"):
                if file_data["df"] is not None:
                    with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞..."):
                        success = send_to_kafka(
                            file_data["df"],
                            KAFKA_CONFIG["topic"],
                            KAFKA_CONFIG["bootstrap_servers"]
                        )
                        if success:
                            st.session_state.uploaded_files[file_name]["status"] = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                            st.rerun()
                else:
                    st.error("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")